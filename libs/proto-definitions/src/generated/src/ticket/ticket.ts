// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: src/ticket/ticket.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "ticket";

export interface Ticket {
  id: string;
  event_id: string;
  seat_number: string;
  section: string;
  price: number;
  /** available, reserved, sold */
  status: string;
  created_at: string;
  updated_at: string;
}

export interface GetTicketByIdRequest {
  id: string;
}

export interface GetTicketByIdResponse {
  ticket: Ticket | undefined;
}

export interface CreateTicketRequest {
  event_id: string;
  seat_number: string;
  section: string;
  price: number;
}

export interface CreateTicketResponse {
  ticket: Ticket | undefined;
}

export interface UpdateTicketRequest {
  id: string;
  event_id: string;
  seat_number: string;
  section: string;
  price: number;
  status: string;
}

export interface UpdateTicketResponse {
  ticket: Ticket | undefined;
}

export interface DeleteTicketRequest {
  id: string;
}

export interface DeleteTicketResponse {
  success: boolean;
  message: string;
}

export interface GetAvailableTicketsRequest {
  event_id: string;
  section: string;
}

export interface GetAvailableTicketsResponse {
  tickets: Ticket[];
  total_count: number;
}

export interface ReserveTicketRequest {
  ticket_id: string;
  user_id: string;
  reservation_timeout_minutes: number;
}

export interface ReserveTicketResponse {
  success: boolean;
  message: string;
  ticket: Ticket | undefined;
}

export const TICKET_PACKAGE_NAME = "ticket";

function createBaseTicket(): Ticket {
  return { id: "", event_id: "", seat_number: "", section: "", price: 0, status: "", created_at: "", updated_at: "" };
}

export const Ticket: MessageFns<Ticket> = {
  encode(message: Ticket, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.event_id !== "") {
      writer.uint32(18).string(message.event_id);
    }
    if (message.seat_number !== "") {
      writer.uint32(26).string(message.seat_number);
    }
    if (message.section !== "") {
      writer.uint32(34).string(message.section);
    }
    if (message.price !== 0) {
      writer.uint32(41).double(message.price);
    }
    if (message.status !== "") {
      writer.uint32(50).string(message.status);
    }
    if (message.created_at !== "") {
      writer.uint32(58).string(message.created_at);
    }
    if (message.updated_at !== "") {
      writer.uint32(66).string(message.updated_at);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Ticket {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTicket();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.event_id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.seat_number = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.section = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.price = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.created_at = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.updated_at = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetTicketByIdRequest(): GetTicketByIdRequest {
  return { id: "" };
}

export const GetTicketByIdRequest: MessageFns<GetTicketByIdRequest> = {
  encode(message: GetTicketByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTicketByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTicketByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetTicketByIdResponse(): GetTicketByIdResponse {
  return { ticket: undefined };
}

export const GetTicketByIdResponse: MessageFns<GetTicketByIdResponse> = {
  encode(message: GetTicketByIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ticket !== undefined) {
      Ticket.encode(message.ticket, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTicketByIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTicketByIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ticket = Ticket.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateTicketRequest(): CreateTicketRequest {
  return { event_id: "", seat_number: "", section: "", price: 0 };
}

export const CreateTicketRequest: MessageFns<CreateTicketRequest> = {
  encode(message: CreateTicketRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.event_id !== "") {
      writer.uint32(10).string(message.event_id);
    }
    if (message.seat_number !== "") {
      writer.uint32(18).string(message.seat_number);
    }
    if (message.section !== "") {
      writer.uint32(26).string(message.section);
    }
    if (message.price !== 0) {
      writer.uint32(33).double(message.price);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTicketRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTicketRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.event_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.seat_number = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.section = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.price = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateTicketResponse(): CreateTicketResponse {
  return { ticket: undefined };
}

export const CreateTicketResponse: MessageFns<CreateTicketResponse> = {
  encode(message: CreateTicketResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ticket !== undefined) {
      Ticket.encode(message.ticket, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTicketResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTicketResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ticket = Ticket.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUpdateTicketRequest(): UpdateTicketRequest {
  return { id: "", event_id: "", seat_number: "", section: "", price: 0, status: "" };
}

export const UpdateTicketRequest: MessageFns<UpdateTicketRequest> = {
  encode(message: UpdateTicketRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.event_id !== "") {
      writer.uint32(18).string(message.event_id);
    }
    if (message.seat_number !== "") {
      writer.uint32(26).string(message.seat_number);
    }
    if (message.section !== "") {
      writer.uint32(34).string(message.section);
    }
    if (message.price !== 0) {
      writer.uint32(41).double(message.price);
    }
    if (message.status !== "") {
      writer.uint32(50).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTicketRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTicketRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.event_id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.seat_number = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.section = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.price = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUpdateTicketResponse(): UpdateTicketResponse {
  return { ticket: undefined };
}

export const UpdateTicketResponse: MessageFns<UpdateTicketResponse> = {
  encode(message: UpdateTicketResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ticket !== undefined) {
      Ticket.encode(message.ticket, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTicketResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTicketResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ticket = Ticket.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseDeleteTicketRequest(): DeleteTicketRequest {
  return { id: "" };
}

export const DeleteTicketRequest: MessageFns<DeleteTicketRequest> = {
  encode(message: DeleteTicketRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTicketRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTicketRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseDeleteTicketResponse(): DeleteTicketResponse {
  return { success: false, message: "" };
}

export const DeleteTicketResponse: MessageFns<DeleteTicketResponse> = {
  encode(message: DeleteTicketResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTicketResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTicketResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetAvailableTicketsRequest(): GetAvailableTicketsRequest {
  return { event_id: "", section: "" };
}

export const GetAvailableTicketsRequest: MessageFns<GetAvailableTicketsRequest> = {
  encode(message: GetAvailableTicketsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.event_id !== "") {
      writer.uint32(10).string(message.event_id);
    }
    if (message.section !== "") {
      writer.uint32(18).string(message.section);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAvailableTicketsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAvailableTicketsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.event_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.section = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetAvailableTicketsResponse(): GetAvailableTicketsResponse {
  return { tickets: [], total_count: 0 };
}

export const GetAvailableTicketsResponse: MessageFns<GetAvailableTicketsResponse> = {
  encode(message: GetAvailableTicketsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tickets) {
      Ticket.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.total_count !== 0) {
      writer.uint32(16).int32(message.total_count);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAvailableTicketsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAvailableTicketsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tickets.push(Ticket.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.total_count = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseReserveTicketRequest(): ReserveTicketRequest {
  return { ticket_id: "", user_id: "", reservation_timeout_minutes: 0 };
}

export const ReserveTicketRequest: MessageFns<ReserveTicketRequest> = {
  encode(message: ReserveTicketRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ticket_id !== "") {
      writer.uint32(10).string(message.ticket_id);
    }
    if (message.user_id !== "") {
      writer.uint32(18).string(message.user_id);
    }
    if (message.reservation_timeout_minutes !== 0) {
      writer.uint32(24).int32(message.reservation_timeout_minutes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReserveTicketRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReserveTicketRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ticket_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.user_id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.reservation_timeout_minutes = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseReserveTicketResponse(): ReserveTicketResponse {
  return { success: false, message: "", ticket: undefined };
}

export const ReserveTicketResponse: MessageFns<ReserveTicketResponse> = {
  encode(message: ReserveTicketResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.ticket !== undefined) {
      Ticket.encode(message.ticket, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReserveTicketResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReserveTicketResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ticket = Ticket.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface TicketServiceClient {
  getTicketById(request: GetTicketByIdRequest, metadata?: Metadata): Observable<GetTicketByIdResponse>;

  createTicket(request: CreateTicketRequest, metadata?: Metadata): Observable<CreateTicketResponse>;

  updateTicket(request: UpdateTicketRequest, metadata?: Metadata): Observable<UpdateTicketResponse>;

  deleteTicket(request: DeleteTicketRequest, metadata?: Metadata): Observable<DeleteTicketResponse>;

  getAvailableTickets(
    request: GetAvailableTicketsRequest,
    metadata?: Metadata,
  ): Observable<GetAvailableTicketsResponse>;

  reserveTicket(request: ReserveTicketRequest, metadata?: Metadata): Observable<ReserveTicketResponse>;
}

export interface TicketServiceController {
  getTicketById(
    request: GetTicketByIdRequest,
    metadata?: Metadata,
  ): Promise<GetTicketByIdResponse> | Observable<GetTicketByIdResponse> | GetTicketByIdResponse;

  createTicket(
    request: CreateTicketRequest,
    metadata?: Metadata,
  ): Promise<CreateTicketResponse> | Observable<CreateTicketResponse> | CreateTicketResponse;

  updateTicket(
    request: UpdateTicketRequest,
    metadata?: Metadata,
  ): Promise<UpdateTicketResponse> | Observable<UpdateTicketResponse> | UpdateTicketResponse;

  deleteTicket(
    request: DeleteTicketRequest,
    metadata?: Metadata,
  ): Promise<DeleteTicketResponse> | Observable<DeleteTicketResponse> | DeleteTicketResponse;

  getAvailableTickets(
    request: GetAvailableTicketsRequest,
    metadata?: Metadata,
  ): Promise<GetAvailableTicketsResponse> | Observable<GetAvailableTicketsResponse> | GetAvailableTicketsResponse;

  reserveTicket(
    request: ReserveTicketRequest,
    metadata?: Metadata,
  ): Promise<ReserveTicketResponse> | Observable<ReserveTicketResponse> | ReserveTicketResponse;
}

export function TicketServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getTicketById",
      "createTicket",
      "updateTicket",
      "deleteTicket",
      "getAvailableTickets",
      "reserveTicket",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TicketService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TicketService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TICKET_SERVICE_NAME = "TicketService";

export type TicketServiceService = typeof TicketServiceService;
export const TicketServiceService = {
  getTicketById: {
    path: "/ticket.TicketService/GetTicketById",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetTicketByIdRequest): Buffer => Buffer.from(GetTicketByIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetTicketByIdRequest => GetTicketByIdRequest.decode(value),
    responseSerialize: (value: GetTicketByIdResponse): Buffer =>
      Buffer.from(GetTicketByIdResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetTicketByIdResponse => GetTicketByIdResponse.decode(value),
  },
  createTicket: {
    path: "/ticket.TicketService/CreateTicket",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateTicketRequest): Buffer => Buffer.from(CreateTicketRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateTicketRequest => CreateTicketRequest.decode(value),
    responseSerialize: (value: CreateTicketResponse): Buffer =>
      Buffer.from(CreateTicketResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CreateTicketResponse => CreateTicketResponse.decode(value),
  },
  updateTicket: {
    path: "/ticket.TicketService/UpdateTicket",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateTicketRequest): Buffer => Buffer.from(UpdateTicketRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): UpdateTicketRequest => UpdateTicketRequest.decode(value),
    responseSerialize: (value: UpdateTicketResponse): Buffer =>
      Buffer.from(UpdateTicketResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): UpdateTicketResponse => UpdateTicketResponse.decode(value),
  },
  deleteTicket: {
    path: "/ticket.TicketService/DeleteTicket",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteTicketRequest): Buffer => Buffer.from(DeleteTicketRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): DeleteTicketRequest => DeleteTicketRequest.decode(value),
    responseSerialize: (value: DeleteTicketResponse): Buffer =>
      Buffer.from(DeleteTicketResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): DeleteTicketResponse => DeleteTicketResponse.decode(value),
  },
  getAvailableTickets: {
    path: "/ticket.TicketService/GetAvailableTickets",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAvailableTicketsRequest): Buffer =>
      Buffer.from(GetAvailableTicketsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetAvailableTicketsRequest => GetAvailableTicketsRequest.decode(value),
    responseSerialize: (value: GetAvailableTicketsResponse): Buffer =>
      Buffer.from(GetAvailableTicketsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetAvailableTicketsResponse => GetAvailableTicketsResponse.decode(value),
  },
  reserveTicket: {
    path: "/ticket.TicketService/ReserveTicket",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ReserveTicketRequest): Buffer => Buffer.from(ReserveTicketRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ReserveTicketRequest => ReserveTicketRequest.decode(value),
    responseSerialize: (value: ReserveTicketResponse): Buffer =>
      Buffer.from(ReserveTicketResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ReserveTicketResponse => ReserveTicketResponse.decode(value),
  },
} as const;

export interface TicketServiceServer extends UntypedServiceImplementation {
  getTicketById: handleUnaryCall<GetTicketByIdRequest, GetTicketByIdResponse>;
  createTicket: handleUnaryCall<CreateTicketRequest, CreateTicketResponse>;
  updateTicket: handleUnaryCall<UpdateTicketRequest, UpdateTicketResponse>;
  deleteTicket: handleUnaryCall<DeleteTicketRequest, DeleteTicketResponse>;
  getAvailableTickets: handleUnaryCall<GetAvailableTicketsRequest, GetAvailableTicketsResponse>;
  reserveTicket: handleUnaryCall<ReserveTicketRequest, ReserveTicketResponse>;
}

export interface TicketServiceClient extends Client {
  getTicketById(
    request: GetTicketByIdRequest,
    callback: (error: ServiceError | null, response: GetTicketByIdResponse) => void,
  ): ClientUnaryCall;
  getTicketById(
    request: GetTicketByIdRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetTicketByIdResponse) => void,
  ): ClientUnaryCall;
  getTicketById(
    request: GetTicketByIdRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetTicketByIdResponse) => void,
  ): ClientUnaryCall;
  createTicket(
    request: CreateTicketRequest,
    callback: (error: ServiceError | null, response: CreateTicketResponse) => void,
  ): ClientUnaryCall;
  createTicket(
    request: CreateTicketRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateTicketResponse) => void,
  ): ClientUnaryCall;
  createTicket(
    request: CreateTicketRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateTicketResponse) => void,
  ): ClientUnaryCall;
  updateTicket(
    request: UpdateTicketRequest,
    callback: (error: ServiceError | null, response: UpdateTicketResponse) => void,
  ): ClientUnaryCall;
  updateTicket(
    request: UpdateTicketRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateTicketResponse) => void,
  ): ClientUnaryCall;
  updateTicket(
    request: UpdateTicketRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateTicketResponse) => void,
  ): ClientUnaryCall;
  deleteTicket(
    request: DeleteTicketRequest,
    callback: (error: ServiceError | null, response: DeleteTicketResponse) => void,
  ): ClientUnaryCall;
  deleteTicket(
    request: DeleteTicketRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteTicketResponse) => void,
  ): ClientUnaryCall;
  deleteTicket(
    request: DeleteTicketRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteTicketResponse) => void,
  ): ClientUnaryCall;
  getAvailableTickets(
    request: GetAvailableTicketsRequest,
    callback: (error: ServiceError | null, response: GetAvailableTicketsResponse) => void,
  ): ClientUnaryCall;
  getAvailableTickets(
    request: GetAvailableTicketsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAvailableTicketsResponse) => void,
  ): ClientUnaryCall;
  getAvailableTickets(
    request: GetAvailableTicketsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAvailableTicketsResponse) => void,
  ): ClientUnaryCall;
  reserveTicket(
    request: ReserveTicketRequest,
    callback: (error: ServiceError | null, response: ReserveTicketResponse) => void,
  ): ClientUnaryCall;
  reserveTicket(
    request: ReserveTicketRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ReserveTicketResponse) => void,
  ): ClientUnaryCall;
  reserveTicket(
    request: ReserveTicketRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ReserveTicketResponse) => void,
  ): ClientUnaryCall;
}

export const TicketServiceClient = makeGenericClientConstructor(
  TicketServiceService,
  "ticket.TicketService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): TicketServiceClient;
  service: typeof TicketServiceService;
  serviceName: string;
};

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
